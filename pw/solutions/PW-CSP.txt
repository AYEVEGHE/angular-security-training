PW - CSP

1 - Starter Content Security Policy
    
    a) Configure a minimalistic CSP with the following value and observe the result (see console log) : "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self';"
       Hints : 
          - This policy allows images, scripts, AJAX, and CSS from the same origin, and does not allow any other resources to load (eg inline scripting, inline styles, object, frame, media, etc). It is a good starting point but often too restrictive for many existing sites
          - You can declare your CSP as a meta tag with "http-equiv" directive in index.html : <meta http-equiv="__directive__" content="__value__">
    
    b) Update step by step the configuration in order to make the website load properly (Content-Security-Policy-Report-Only header)
       Hint : See https://content-security-policy.com/ for more details on existing CSP directives
        
    c) Check the security level of this CSP on https://csp-evaluator.withgoogle.com/
    
    d) Declare the CSP server-side     
       Hints : 
          - Use the spring security API HttpSecurity : HttpSecurity#headers()#contentSecurityPolicy("...") 
          - Set the CSP configuration in /bookstore/src/main/java/com/worldline/bookstore/config/SecurityConfiguration.java
          - Bypass the angular-cli proxy in order to use the server-side CSP configuration ('ng build', then use http://localhost:8080/#/home)     
    
2 - Configure a CSP 3
    
    a) Use CSP to secure your app against inline scripting
       - Declare an arbitrary inline scripting : "<script>document.write('<h1>Inline scripting is <b>not recommended</b>! But if you have not the choice, <b>secure your app with CSP</b></h1>');</script>" 
       - Update the CSP in order to block the inline scripting? 
       - Update the CSP in order to allow this inline scripting in a secure way (consider CSP3 SHA-256 hash syntax)
       
       Hints : 
          - To generate the hash, use this online tool : https://report-uri.io/home/hash (beware to spaces and carriage returns...)
    
    b) Check the security level of this CSP on https://csp-evaluator.withgoogle.com/ 
 

Solution : 

1 - In index.html
 
  a) <meta http-equiv="Content-Security-Policy" content="default-src 'none'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; connect-src 'self'; img-src 'self'; style-src 'self'; font-src 'self';">
    
  b) <meta http-equiv="Content-Security-Policy-Report-Only" content="script-src 'self' 'unsafe-eval' ;connect-src http://localhost:8080 http://localhost:9000; style-src 'self' 'unsafe-inline'; font-src 'self' ; img-src 'self' ; child-src 'self' ; default-src 'self'; object-src 'none'">

  c) <meta http-equiv="Content-Security-Policy" content="script-src 'self' 'unsafe-eval' ;connect-src http://localhost:8080 http://localhost:9000; style-src 'self' 'unsafe-inline'; font-src 'self' ; img-src 'self' ; child-src 'self' ; default-src 'self'; object-src 'none'">

  d) In SecurityConfiguration.java
  
      @Override
    	protected void configure(HttpSecurity http) throws Exception {
        ...
        http
    		.headers()
    		.contentSecurityPolicy(...);
        ...
      }
  
2 - in /bookstore/src/main/java/com/worldline/bookstore/config/SecurityConfiguration.java

    a) -  replace "script-src 'self' ..."  by "script-src + http://localhost:8080 ..."
       -  use https://report-uri.io to generate a sha256 for the following syntax (between <script> tags) : "document.write('<h1>Inline scripting is <b>not recommended</b>! But if you have not the choice, <b>secure your app with CSP</b></h1>');"

          //     Add CSP hash for the following inline scripting (see https://report-uri.io/home/hash) : 
          //    	- "document.write('<h1>Inline scripting is <b>not recommended</b>! But if you have not the choice, <b>secure your app with CSP</b></h1>');" 	==> 'sha256-lK+Y3vDnNUrD/ZPLGsnM6B+euoBxZ/MyiIbY2G5VoPw='
          //    	- inline style ...    
          private void setCspConfig(HttpSecurity http) throws Exception {
          	http
               .headers()
               	.contentSecurityPolicy(
       		        "script-src" +
      ==>		        " http://localhost:8080 'unsafe-eval' 'sha256-lK+Y3vDnNUrD/ZPLGsnM6B+euoBxZ/MyiIbY2G5VoPw='" +
       				";" +
       			  	// add connect-src directive to adapt CSP over cross-origin requests (CORS)  
      					"connect-src"+
      					" http://localhost:8080 http://localhost:9000"
      				+ ";"+
      				  " style-src" +
       			        " 'self' 'unsafe-inline'"+
       				";" +
       				 " font-src" +
       				    " 'self' "+
       				";" +
       				 " img-src" +
       				     " 'self' " +
       				";" +
       				 " child-src" +
       				     " 'self' " +
       				";" +
      					" object-src" +
      					   " 'none' " +
      					";" +
      					" default-src" +
       				     " 'self' ");//.reportOnly();
      	}
        
    b) copy/paste CSP config from client debugger (check response header) and check it with  https://csp-evaluator.withgoogle.com/ 