PW - XSS


1 - Render HTML formatting elements in Angular
    a) in "Home" page, create a "news" with formatted content by using HTML elements like <b> and <i> . Add links.
       Hint : Use "[innerHTML]" attribute to render safe HTML tags
        
    b) create a "news" with scripting. What do you observe ? Take a look at the console.
      
2 - Use DomSanitizer service 
    a) to transform the "Welcome" message (see "Home" page) to a link which displays an alert popup (use "javascript:alert" syntax).
    b) [Just for the demo, don't do this in a real situation] to sanitize the "newsOfTheDay" content in order to execute some basic and safe scripting based on DOM even listener (onclick, ...) 
     
   

Solutions : 
 
1 - a) <i>Welcome</i> <b>Test</b>
       ==> Tags are silently and safety escaped by Angular if you use interpolation {{}}
       
       Add "innerHTML" attribut to execute safe tags   
       ==> <td [innerHTML]="currentNew.content"></td>
        
    b) <a href="javascript:alert('XSS!')">click!</a> 
       <span onclick="alert('XSS!');">test!</span>
       
       ==> Scripting is safety escaped - Angular logs a warning on the client console
       
      "WARNING: sanitizing unsafe URL value javascript:alert('XSS!') (see http://g.co/ng/security#xss)"
      
      and 
      
      "WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss)."
       
       Angular will replace   
       
            <a href="javascript:alert('XSS!')">click!</a>
            
       by 
      
            <a href="unsafe:javascript:alert('XSS!')">click!</a>
            
      And the scripting will not be executed.
      
    
2 - a) in Home.ts
 
        ==> import {DomSanitizer} from '@angular/platform-browser'
         ...
         
              export class Home implements OnInit{
        
        	    message: string = 'Welcome in our shop!!!';
        	    news: News[];
        	    newsOfTheDay: News= {};
        	    nextNews: News = {};
        ==>	  trustedUrl: string;
        
            	constructor(
            		private newsService: NewsService,
        ==>  		private sanitizer: DomSanitizer
            	) {}
            
            	ngOnInit(){
               		// javascript: URLs are dangerous if attacker controlled.
              		// Angular sanitizes them in data binding, but you can
              		// explicitly tell Angular to trust this value:
        ==>    		this.trustedUrl = this.sanitizer.bypassSecurityTrustUrl('javascript:alert("Don\'t forget to add a comment in the bottom please!")');
            	   	this.updateNews();
            	}
      
      
       In Home.html
 
       <h1><a [href]="trustedUrl">{{message}}</a></h1>
   
      
      b) In Home.ts
      
        ...
        
        this.newsService.randomNews()
      		.subscribe((news: News) => {
      			this.newsOfTheDay = news;
      ==> 	this.newsOfTheDay.content = this.sanitizer.bypassSecurityTrustHtml(this.newsOfTheDay.content);    // if you want to force a given scripting which you trust and is under you strict control (never from user input), use DomSanitizer#bypassSecurityTrustHtml(String) method
      		});
      	 }
      
      
  
        in Home.html
     
     
           <tr class="gradeA" *ngFor="let currentNew of news">
                <td>{{currentNew.author}}</td>
                <td>{{currentNew.category}}</td>
         ==>    <td [innerHTML]="currentNew.content"></td>
                <td><button class="btn" (click)="addLike(currentNew)"><img src="styles/ktheme/img/like.png" /> {{currentNew.likes}}</button></td>
                <td><button class="btn" (click)="deleteNews(currentNew)"><img src="styles/ktheme/img/delete.png"/></button></td>
            </tr>  
            
            
           <div class="content">
        ==>    <p> <span [innerHTML]="newsOfTheDay.content"></span> from <b>{{newsOfTheDay.author}}</b></p>
           </div> 