PW API-Protection (Part 2)

Configure CORS

1 - Protect your API against other domains
    
    CORS is effective only in case of cross-origin requests, to simulate a cross-origin request
    
    a) Modify app/src/services/newsService.ts, in "getNews()" function, update the existing request "api/news" 
        - Use an absolute url with the port 8080 
        - Explicit the "Content-Type" header for the request
        - Stop using a proxy ('ng serve --proxy-config proxy.conf.json') if any and launch 'ng build' command to update the 'dist' repo (needed for the next steps) 
     
     Hint : to set a header for a request, use a Headers object and pass it as a second param of the http#get method
     
          let headers = new Headers({'Content-Type': 'application/json'});
          return this.http.get(_url_, {headers: headers}) 
            
    b) Launch a second server in a different port : mvn -Drun.arguments="--server.port=9000" and access to corresponding home page http://localhost:9000/#/home
    c) What's the result ? Why ? Observe the client console. 
    
    Hint : Read about Single Origin Policy(SOP)
    
2 - Allow cross-origin requests
   
    a) Configure CORS in order to allow cross-origin request from localhost only (choose the right port)
    b) Observe the network traffic - Look for CORS headers for the "api/news" request/response
  
    Hint : 
      - To enable CORS, see bookstore/src/main/resources/config/application.yml
      - To authorize an HTTP method for a API, use  HttpSecurity#authorizeRequests().antMatchers(HttpMethod.OPTIONS, "/**").permitAll()    


Solution : 

 1 - Configure CORS
 
  a) In src/app/services/newsService.ts , we need to set explicitly a header for the request in order to see more CORS headers ("OPTIONS" HTTP method, Acces-Control-Request-Headers, Acces-Control-Request-Method, ...). 
 
     getNews= (): Observable<News> => {

    		if ( this.theNews !== undefined ){
    			return this.theNews;
    		}
    		
    		// CORS illustration : 
    		// force a cross-origin request with 
    		// - an explicit 'content-type' header
    		// - an abolute url on port 8080 (we ask trainees to launch their webapp on localhost:9000 and to not use any reverse proxy)
    		let headers = new HttpHeaders({'Content-Type': 'application/json'});
    		
    		return this.http.get('http://localhost:8080/api/news', {headers: headers})
    			.do((news: News[]) => {
    				this.theNews = Observable.from(news);
    			})
    			.flatMap((news: News[]) => {
    				return this.theNews;
    			});
    }
      
    b)  launch 2 jvms : 
      - mvn
      - mvn -Drun.arguments="--server.port=9000"
      
      and access to http://localhost:9000/#/home - observe the client console
    
    c) Cross-origin request for "api/news" is blocked because of Single Origin Policy (SOP) implemented by browsers. 'http://localhost:9000' is not allowed as origin for CORS.  
    
       Client console log : 
       
       OPTION http://localhost:8080/api/news 403 (Forbidden)
       Failed to load http://localhost:8080/api/news: Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:9000' is therefore not allowed access. The response had HTTP status code 403.
      
      
2 - a) In bookstore/src/main/resources/config/application.yml
  
  cors:
        allowed-origins: http://localhost:9000
        allowed-methods: GET, PUT, POST, DELETE, OPTIONS
        allowed-headers: "*"
        exposed-headers:
        allow-credentials: true
        max-age: 1800
        
        
  b) from Chrome debugger , there are 2 requests/responses !! First one is an "OPTIONS", the 2nd is "GET"
  
  
  First (OPTIONS) : 
  
      General
      
          Request URL:http://localhost:8080/api/news
 ==>      Request Method:OPTIONS
          Status Code:200 OK
          Remote Address:[::1]:8080
          Referrer Policy:no-referrer-when-downgrade
      
      Response Headers
      
          HTTP/1.1 200 OK
          Expires: 0
          Cache-Control: no-cache, no-store, max-age=0, must-revalidate
 ==>      Access-Control-Allow-Headers: content-type
          X-XSS-Protection: 1; mode=block
          Pragma: no-cache
          Date: Thu, 14 Sep 2017 09:32:40 GMT
          Connection: keep-alive
 ==>      Access-Control-Allow-Origin: http://localhost:9000
 ==>      Vary: Origin
 ==>      Access-Control-Allow-Credentials: true
          X-Content-Type-Options: nosniff
          Content-Length: 0
==>       Access-Control-Allow-Methods: GET,PUT,POST,DELETE,OPTIONS
==>       Access-Control-Max-Age: 1800
      
      Request Headers
      
 ==>      OPTIONS /api/news HTTP/1.1
 ==>      Host: localhost:8080
          Connection: keep-alive
          Pragma: no-cache
          Cache-Control: no-cache
 ==>      Access-Control-Request-Method: GET
 ==>      Origin: http://localhost:9000
          User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.79 Safari/537.36
 ==>      Access-Control-Request-Headers: content-type
          Accept: */*
          Referer: http://localhost:9000/
          Accept-Encoding: gzip, deflate, br
          Accept-Language: fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4
  
  
  
  2nd request (GET) : 
  
      General : 
  
          Request URL:http://localhost:8080/api/news
  ==>     Request Method:GET
          Status Code:200 OK
          Remote Address:[::1]:8080
          Referrer Policy:no-referrer-when-downgrade
      
      Response Headers
      
          HTTP/1.1 200 OK
          Expires: 0
          Cache-Control: no-cache, no-store, max-age=0, must-revalidate
          X-XSS-Protection: 1; mode=block
          Pragma: no-cache
          Date: Thu, 14 Sep 2017 09:32:40 GMT
          Connection: keep-alive
  ==>     Access-Control-Allow-Origin: http://localhost:9000
  ==>     Vary: Origin
  ==>     Access-Control-Allow-Credentials: true
          X-Content-Type-Options: nosniff
          Transfer-Encoding: chunked
          Content-Type: application/json;charset=UTF-8
          X-Application-Context: bookstore:swagger,dev:8080
      
      Request Headers
      
  ==>     GET /api/news HTTP/1.1
  ==>     Host: localhost:8080
          Connection: keep-alive
          Pragma: no-cache
          Cache-Control: no-cache
  ==>     Origin: http://localhost:9000
          User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.79 Safari/537.36
          content-type: application/json
          Accept: */*
          Referer: http://localhost:9000/
          Accept-Encoding: gzip, deflate, br
          Accept-Language: fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4
  
  
    For more details on "Vary: Origin", see https://developer.mozilla.org/fr/docs/Web/HTTP/Headers/Vary
    
    
    
    